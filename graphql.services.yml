parameters:
  graphql.config:
    # GraphQL result cache:
    #
    # By default, the GraphQL results get cached. This can be disabled during development.
    #
    # @default true
    result_cache: true

    # GraphQL schema cache:
    #
    # By default, the GraphQL schema gets cached. This can be disabled during development.
    #
    # @default true
    schema_cache: true

    # Development mode:
    #
    # Enables debugging mode and disables field security.
    #
    # When enabled, all fields can be resolved without restrictions.
    #
    # @default false
    development: false

services:
  # Check access for executing graphql queries.
  access_check.graphql.query:
    class: Drupal\graphql\Access\QueryAccessCheck
    arguments: ['@request_stack']
    tags:
      - { name: access_check, applies_to: _graphql_query_access }

  # Cache bin for graphql plugin definitions.
  # TODO: Make this do a batch / multiple cache lookup across all plugin types.
  cache.graphql_plugin_definitions:
    class: Drupal\Core\Cache\CacheBackendInterface
    tags:
      - { name: cache.bin }
    factory: cache_factory:get
    arguments: [graphql_plugin_definitions]

  # Schema and processor factory.
  graphql.query_processor:
    class: Drupal\graphql\GraphQL\Execution\QueryProcessor
    arguments:
      - '@renderer'
      - '@current_user'
      - '@plugin.manager.graphql.schema'
      - '@graphql.query_provider'
      - '%graphql.config%'

  # Query map provider using the composite pattern.
  graphql.query_provider:
    class: Drupal\graphql\GraphQL\QueryProvider\QueryProvider
    tags:
        - { name: service_collector, tag: graphql_query_provider, call: addQueryProvider }
  graphql.query_provider.query_map.entity:
    class: Drupal\graphql\GraphQL\QueryProvider\EntityQueryMapQueryProvider
    arguments: ['@entity_type.manager']
    tags:
        - { name: graphql_query_provider }
  graphql.query_provider.query_map.json:
    class: Drupal\graphql\GraphQL\QueryProvider\JsonQueryMapQueryProvider
    arguments: ['@cache.default', '@config.factory']
    tags:
        - { name: graphql_query_provider }

  graphql.query_routes:
    class: Drupal\graphql\Routing\QueryRoutes
    arguments: ['@plugin.manager.graphql.schema']
    tags:
      - { name: 'event_subscriber' }

  # Deny caching in the dynamic page cache.
  graphql.request_policy.deny_query:
    class: Drupal\graphql\Cache\RequestPolicy\DenyQuery
    tags:
      - { name: dynamic_page_cache_request_policy }

  # Upcasting for graphql query request parameters.
  graphql.route_enhancer.query:
    class: Drupal\graphql\Routing\QueryRouteEnhancer
    arguments: ['@graphql.query_provider']
    tags:
      - { name: route_enhancer }

  # Schema introspection service.
  graphql.introspection:
    class: Drupal\graphql\GraphQL\Utility\Introspection
    arguments: ['@graphql.query_processor']

  # Support for subrequests.
  graphql.subrequest_subscriber:
    class: Drupal\graphql\EventSubscriber\SubrequestSubscriber
    tags:
      - { name: event_subscriber }

  # Context repository for fetching contexts from sub-requests.
  graphql.context_repository:
    class: Drupal\graphql\GraphQL\Context\ContextRepository
    tags:
      - { name: service_collector, tag: context_provider, call: addContextProvider }

  # Combines plugin definitions from all plugin managers.
  graphql.schema_builder:
    class: Drupal\graphql\Plugin\SchemaBuilder
    arguments:
      - '@plugin.manager.graphql.field'
      - '@plugin.manager.graphql.mutation'
    tags:
      - { name: service_collector, tag: graphql_type_manager, call: addTypeManager }

  # Plugin manager for schemas
  plugin.manager.graphql.schema:
    class: Drupal\graphql\Plugin\SchemaPluginManager
    arguments:
      - 'Plugin/GraphQL/Schemas'
      - '@container.namespaces'
      - '@module_handler'
      - '@cache.graphql_plugin_definitions'
      - '\Drupal\graphql\Plugin\GraphQL\Schemas\SchemaPluginBase'
      - '\Drupal\graphql\Annotation\GraphQLSchema'

  # Plugin manager for fields.
  plugin.manager.graphql.field:
    class: Drupal\graphql\Plugin\FieldPluginManager
    arguments:
      - 'Plugin/GraphQL/Fields'
      - '@container.namespaces'
      - '@module_handler'
      - '@cache.graphql_plugin_definitions'
      - '\Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase'
      - '\Drupal\graphql\Annotation\GraphQLField'

  # Plugin manager for mutations.
  plugin.manager.graphql.mutation:
    class: Drupal\graphql\Plugin\MutationPluginManager
    arguments:
      - 'Plugin/GraphQL/Mutations'
      - '@container.namespaces'
      - '@module_handler'
      - '@cache.graphql_plugin_definitions'
      - '\Drupal\graphql\Plugin\GraphQL\Mutations\MutationPluginBase'
      - '\Drupal\graphql\Annotation\GraphQLMutation'

  # Plugin manager implementations for schema types.
  plugin.manager.graphql.union:
    class: Drupal\graphql\Plugin\TypePluginManager
    tags:
      - { name: graphql_type_manager }
    arguments:
      - 'Plugin/GraphQL/UnionTypes'
      - '@container.namespaces'
      - '@module_handler'
      - '@cache.graphql_plugin_definitions'
      - '\Drupal\graphql\Plugin\GraphQL\Unions\UnionTypePluginBase'
      - '\Drupal\graphql\Annotation\GraphQLUnionType'
      - 'union_types'
  plugin.manager.graphql.interface:
    class: Drupal\graphql\Plugin\TypePluginManager
    tags:
      - { name: graphql_type_manager }
    arguments:
      - 'Plugin/GraphQL/Interfaces'
      - '@container.namespaces'
      - '@module_handler'
      - '@cache.graphql_plugin_definitions'
      - '\Drupal\graphql\Plugin\GraphQL\Interfaces\InterfacePluginBase'
      - '\Drupal\graphql\Annotation\GraphQLInterface'
      - 'interfaces'
  plugin.manager.graphql.type:
    class: Drupal\graphql\Plugin\TypePluginManager
    tags:
      - { name: graphql_type_manager }
    arguments:
      - 'Plugin/GraphQL/Types'
      - '@container.namespaces'
      - '@module_handler'
      - '@cache.graphql_plugin_definitions'
      - '\Drupal\graphql\Plugin\GraphQL\Types\TypePluginBase'
      - '\Drupal\graphql\Annotation\GraphQLType'
      - 'types'
  plugin.manager.graphql.input:
    class: Drupal\graphql\Plugin\TypePluginManager
    tags:
      - { name: graphql_type_manager }
    arguments:
      - 'Plugin/GraphQL/InputTypes'
      - '@container.namespaces'
      - '@module_handler'
      - '@cache.graphql_plugin_definitions'
      - '\Drupal\graphql\Plugin\GraphQL\InputTypes\InputTypePluginBase'
      - '\Drupal\graphql\Annotation\GraphQLInputType'
      - 'input_types'
  plugin.manager.graphql.scalar:
    class: Drupal\graphql\Plugin\TypePluginManager
    tags:
      - { name: graphql_type_manager }
    arguments:
      - 'Plugin/GraphQL/Scalars'
      - '@container.namespaces'
      - '@module_handler'
      - '@cache.graphql_plugin_definitions'
      - '\Drupal\graphql\Plugin\GraphQL\Scalars\ScalarPluginBase'
      - '\Drupal\graphql\Annotation\GraphQLScalar'
      - 'scalars'
  plugin.manager.graphql.enum:
    class: Drupal\graphql\Plugin\TypePluginManager
    tags:
      - { name: graphql_type_manager }
    arguments:
      - 'Plugin/GraphQL/Enums'
      - '@container.namespaces'
      - '@module_handler'
      - '@cache.graphql_plugin_definitions'
      - '\Drupal\graphql\Plugin\GraphQL\Enums\EnumPluginBase'
      - '\Drupal\graphql\Annotation\GraphQLEnum'
      - 'enums'

  # Voyager.
  graphql.voyager.page_display_variant_subscriber:
    class: Drupal\graphql\EventSubscriber\VoyagerPageDisplayVariantSubscriber
    tags:
      - { name: event_subscriber }
  graphql.voyager.routes:
    class: Drupal\graphql\Routing\VoyagerRoutes
    arguments: ['@plugin.manager.graphql.schema']
    tags:
      - { name: 'event_subscriber' }

  # Explorer.
  graphql.graphiql.page_display_variant_subscriber:
    class: Drupal\graphql\EventSubscriber\ExplorerPageDisplayVariantSubscriber
    tags:
      - { name: event_subscriber }
  graphql.graphiql.explorer_routes:
    class: Drupal\graphql\Routing\ExplorerRoutes
    arguments: ['@plugin.manager.graphql.schema']
    tags:
      - { name: 'event_subscriber' }

  # Buffers.
  graphql.buffer.entity:
      class: Drupal\graphql\GraphQL\Buffers\EntityBuffer
      arguments: ['@entity_type.manager']
  graphql.buffer.subrequest:
      class: Drupal\graphql\GraphQL\Buffers\SubRequestBuffer
      arguments: ['@http_kernel', '@request_stack']